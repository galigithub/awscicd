AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud Formation Demo
Parameters:
   CidrBlock:
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      Default: 10.10.12.0/24
      Description: VPC CIDR Block
      Type: String
   PublicAvailabilityZone:
      Description: The AvailabilityZone to use for the first subnet
      Type: AWS::EC2::AvailabilityZone::Name
   PublicSubnetCIDR:
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      Default: 10.10.12.0/25
      Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
      Type: String
   PrivateAvailabilityZone:
      Description: The AvailabilityZone to use for the second subnet
      Type: AWS::EC2::AvailabilityZone::Name
   PrivateSubnetCIDR:
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      Default: 10.10.12.128/25
      Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
      Type: String
    
   SecurityGroupIds:
      Type: List<AWS::EC2::SecurityGroup::Id>
      Description: Security you want
   KeyName:
      Type: AWS::EC2::KeyPair::KeyName
      Description: Key to Use
   InstanceType:
      Type: String
      Default: t2.micro
   Image:
      Type: String
      Default: ami-0d6621c01e8c2de2c
   ServerName:
      Type: String
      Description: Name your server

Resources:
   myDemoVPC:
      Type: AWS::EC2::VPC
      Properties:
         CidrBlock:
            Ref: CidrBlock
         EnableDnsHostnames: true
         EnableDnsSupport: true
         Tags:
            - Key: Name
              Value:
                 Ref: AWS::StackName
   
   InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
         Tags:
         - Key: Name
            Value:
               Ref: AWS::StackName
   
   GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
         InternetGatewayId:
            Ref: InternetGateway
         VpcId:
            Ref: myDemoVPC
   
   rtb:
      Type: AWS::EC2::RouteTable
      Properties:
         Tags:
            - Key: Name
              Value: {Ref: 'AWS::StackName'}
         VpcId:
            Ref: myDemoVPC
   
   PublicRoute:
      Type: AWS::EC2::Route
      Properties:
         DestinationCidrBlock: 0.0.0.0/0
         GatewayId:
            Ref: InternetGateway
         RouteTableId:
            Ref: rtb
   
   pubSubnet:
      Type: AWS::EC2::Subnet
      Properties:
         AvailabilityZone: {Ref: PublicAvailabilityZone}
         CidrBlock: {Ref: PublicSubnetCIDR}
         MapPublicIpOnLaunch: true
         Tags:
           - Key: Name
             Value:
                Fn::Join:
                  - '-'
                  - [{Ref: 'AWS::StackName'}, {Ref: PublicAvailabilityZone}]
         VpcId: !Ref myDemoVPC

   privSubnet:
      Type: AWS::EC2::Subnet
      Properties:
         AvailabilityZone: {Ref: PrivateAvailabilityZone}
         CidrBlock: {Ref: PrivateSubnetCIDR}
         MapPublicIpOnLaunch: true
         Tags:
           - Key: Name
             Value:
                Fn::Join:
                   - '-'
                   - [{Ref: 'AWS::StackName'}, {Ref: PrivateAvailabilityZone}]
         VpcId: !Ref myDemoVPC

   pubSubnetAssoc:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId:
            Ref: rtb
         SubnetId:
            Ref: pubSubnet

   privSubnetAssoc:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId:
         Ref: rtb
         SubnetId:
            Ref: privSubnet

   WebSecGrp:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupDescription: Enable SSH & HTTPD access via port 22 & 80 respectively
         SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: 0.0.0.0/0
         VpcId: !Ref myDemoVPC
   
   
   Ec2Instance:
      Type: AWS::EC2::Instance
      Properties:
         ImageId: !Ref Image
         InstanceType: !Ref InstanceType
         KeyName: !Ref KeyName
         SecurityGroupIds: !Ref SecurityGroupIds
         UserData:
            Fn::Base64:
               !Sub |
                    #!/bin/bash -ex
                    yum install httpd -y;
                    echo "<h1> I am a Cloud Architect </h1>" > /var/www/html/index.html;
                    cd /var/www/html;
                    chmod 755 index.html;
                    service httpd start;
                    chkconfig httpd on;
         Tags:
            -
               Key: Name
               Value: !Ref ServerName
