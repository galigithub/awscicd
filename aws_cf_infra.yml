AWSTemplateFormatVersion: '2010-09-09'
Description:  Cloud Formation Demo Stack
Metadata: {
    "Version": "v1.0",
    "Comments": "Generated by Miztiik",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["CidrBlock", "pubAvailabilityZone", "pubSubnetCIDR", "privAvailabilityZone", "privSubnetCIDR"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstanceName", "InstanceType", "Environment"]
      },
      {
        "Label": { "default": "RDS Instance Configuration" },
        "Parameters": ["DBInstanceId", "DBName", "DBEngine", "DBUserName", "DBUserPass", "DBStorage", "DBInstanceClass"]
      }
      ]
    }
  }

Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/24
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  privAvailabilityZone:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.128/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  InstanceName:
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::awscf
    Default: awscf
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Environment:
    Description: Application environment for which this network is being created. e.g. Development/Production.
    Type: String
    Default: UAT
    AllowedValues: ["UAT", "DEV", "QA", "PROD"]

  InstancePublicIP:
    Description: Specifies whether to launch instances with public IP addresses in your VPC.
    Type: String
    Default : "True"
    AllowedValues : ["False", "True"]

  InstanceAMI:
    Description: "AMI for use with the EC2 instances"
    Type: String
    Default: "ami-0d6621c01e8c2de2c"
    AllowedValues: ["ami-0d6621c01e8c2de2c"]

Mappings:
  RegionMap: 
    us-west-2: 
      "64": "ami-b63769a1"
    #ap-south-1: 
     # "64": "ami-0d6621c01e8c2de2c"


Resources:
  myDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myDemoVPC

  rtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
      VpcId:
        Ref: myDemoVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: rtb

  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: pubAvailabilityZone}
      CidrBlock: {Ref: pubSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZone}]
      VpcId: !Ref myDemoVPC

  privSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: privAvailabilityZone}
      CidrBlock: {Ref: privSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: privAvailabilityZone}]
      VpcId: !Ref myDemoVPC

  pubSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: pubSubnet

  privSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: privSubnet

  WebSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH & HTTPD access via port 22 & 80 respectively
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref myDemoVPC

  webServer:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 64]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref pubSubnet
      SecurityGroupIds:
        - !Ref WebSecGrp
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            yum install -y httpd php php-mysql mysql-server
            systemctl start httpd
            systemctl start mysqld
            groupadd www
            usermod -a -G www ec2-user

            # Download wordpress site & move to http
            cd /var/www/
            curl -O https://wordpress.org/latest.tar.gz && tar -zxf latest.tar.gz
            rm -rf /var/www/html
            mv wordpress /var/www/html

            # Set the permissions
            chown -R root:www /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} +
            find /var/www -type f -exec chmod 0664 {} +

            # SE Linux permissive
            # needed to make wp connect to DB over newtork
            setsebool -P httpd_can_network_connect=1
            setsebool httpd_can_network_connect_db on

            echo "<h1> Welcome to Valaxy Cloudformation Demo</h1>" >> /var/www/html/index.html

Outputs:
  WebServerPublicIPAddress:
    Description: 'The public IP address of the EC2 Instance.'
    Value: !GetAtt webServer.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-Public-DNS-Address'

  RDSEndPoint:
    Description: 'The RDS Endpoint of MySQL DB'
    Value: !GetAtt DBServer.Endpoint.Address
